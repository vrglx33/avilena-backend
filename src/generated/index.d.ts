// Code generated by Prisma (prisma@1.34.6). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  news: (where?: NewsWhereInput) => Promise<boolean>;
  order: (where?: OrderWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  productOrder: (where?: ProductOrderWhereInput) => Promise<boolean>;
  productType: (where?: ProductTypeWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  news: (where: NewsWhereUniqueInput) => NewsNullablePromise;
  newses: (args?: {
    where?: NewsWhereInput;
    orderBy?: NewsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<News>;
  newsesConnection: (args?: {
    where?: NewsWhereInput;
    orderBy?: NewsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NewsConnectionPromise;
  order: (where: OrderWhereUniqueInput) => OrderNullablePromise;
  orders: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Order>;
  ordersConnection: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrderConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductNullablePromise;
  products: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Product>;
  productsConnection: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductConnectionPromise;
  productOrder: (
    where: ProductOrderWhereUniqueInput
  ) => ProductOrderNullablePromise;
  productOrders: (args?: {
    where?: ProductOrderWhereInput;
    orderBy?: ProductOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProductOrder>;
  productOrdersConnection: (args?: {
    where?: ProductOrderWhereInput;
    orderBy?: ProductOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductOrderConnectionPromise;
  productType: (
    where: ProductTypeWhereUniqueInput
  ) => ProductTypeNullablePromise;
  productTypes: (args?: {
    where?: ProductTypeWhereInput;
    orderBy?: ProductTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProductType>;
  productTypesConnection: (args?: {
    where?: ProductTypeWhereInput;
    orderBy?: ProductTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductTypeConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createNews: (data: NewsCreateInput) => NewsPromise;
  updateNews: (args: {
    data: NewsUpdateInput;
    where: NewsWhereUniqueInput;
  }) => NewsPromise;
  updateManyNewses: (args: {
    data: NewsUpdateManyMutationInput;
    where?: NewsWhereInput;
  }) => BatchPayloadPromise;
  upsertNews: (args: {
    where: NewsWhereUniqueInput;
    create: NewsCreateInput;
    update: NewsUpdateInput;
  }) => NewsPromise;
  deleteNews: (where: NewsWhereUniqueInput) => NewsPromise;
  deleteManyNewses: (where?: NewsWhereInput) => BatchPayloadPromise;
  createOrder: (data: OrderCreateInput) => OrderPromise;
  updateOrder: (args: {
    data: OrderUpdateInput;
    where: OrderWhereUniqueInput;
  }) => OrderPromise;
  updateManyOrders: (args: {
    data: OrderUpdateManyMutationInput;
    where?: OrderWhereInput;
  }) => BatchPayloadPromise;
  upsertOrder: (args: {
    where: OrderWhereUniqueInput;
    create: OrderCreateInput;
    update: OrderUpdateInput;
  }) => OrderPromise;
  deleteOrder: (where: OrderWhereUniqueInput) => OrderPromise;
  deleteManyOrders: (where?: OrderWhereInput) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (args: {
    data: ProductUpdateInput;
    where: ProductWhereUniqueInput;
  }) => ProductPromise;
  updateManyProducts: (args: {
    data: ProductUpdateManyMutationInput;
    where?: ProductWhereInput;
  }) => BatchPayloadPromise;
  upsertProduct: (args: {
    where: ProductWhereUniqueInput;
    create: ProductCreateInput;
    update: ProductUpdateInput;
  }) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createProductOrder: (data: ProductOrderCreateInput) => ProductOrderPromise;
  updateProductOrder: (args: {
    data: ProductOrderUpdateInput;
    where: ProductOrderWhereUniqueInput;
  }) => ProductOrderPromise;
  updateManyProductOrders: (args: {
    data: ProductOrderUpdateManyMutationInput;
    where?: ProductOrderWhereInput;
  }) => BatchPayloadPromise;
  upsertProductOrder: (args: {
    where: ProductOrderWhereUniqueInput;
    create: ProductOrderCreateInput;
    update: ProductOrderUpdateInput;
  }) => ProductOrderPromise;
  deleteProductOrder: (
    where: ProductOrderWhereUniqueInput
  ) => ProductOrderPromise;
  deleteManyProductOrders: (
    where?: ProductOrderWhereInput
  ) => BatchPayloadPromise;
  createProductType: (data: ProductTypeCreateInput) => ProductTypePromise;
  updateProductType: (args: {
    data: ProductTypeUpdateInput;
    where: ProductTypeWhereUniqueInput;
  }) => ProductTypePromise;
  updateManyProductTypes: (args: {
    data: ProductTypeUpdateManyMutationInput;
    where?: ProductTypeWhereInput;
  }) => BatchPayloadPromise;
  upsertProductType: (args: {
    where: ProductTypeWhereUniqueInput;
    create: ProductTypeCreateInput;
    update: ProductTypeUpdateInput;
  }) => ProductTypePromise;
  deleteProductType: (where: ProductTypeWhereUniqueInput) => ProductTypePromise;
  deleteManyProductTypes: (
    where?: ProductTypeWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  news: (
    where?: NewsSubscriptionWhereInput
  ) => NewsSubscriptionPayloadSubscription;
  order: (
    where?: OrderSubscriptionWhereInput
  ) => OrderSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  productOrder: (
    where?: ProductOrderSubscriptionWhereInput
  ) => ProductOrderSubscriptionPayloadSubscription;
  productType: (
    where?: ProductTypeSubscriptionWhereInput
  ) => ProductTypeSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ProductOrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "qty_ASC"
  | "qty_DESC";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "size_ASC"
  | "size_DESC"
  | "fileName_ASC"
  | "fileName_DESC";

export type OrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "status_ASC"
  | "status_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type NewsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "text_ASC"
  | "text_DESC"
  | "image_ASC"
  | "image_DESC";

export type ProductTypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "imageLink_ASC"
  | "imageLink_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "address_ASC"
  | "address_DESC"
  | "password_ASC"
  | "password_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ProductUpdateOneRequiredWithoutProductOrdersInput {
  create?: Maybe<ProductCreateWithoutProductOrdersInput>;
  update?: Maybe<ProductUpdateWithoutProductOrdersDataInput>;
  upsert?: Maybe<ProductUpsertWithoutProductOrdersInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export type NewsWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NewsUpdateManyMutationInput {
  title?: Maybe<String>;
  text?: Maybe<String>;
  image?: Maybe<String>;
}

export interface OrderUpdateWithWhereUniqueWithoutProductsInput {
  where: OrderWhereUniqueInput;
  data: OrderUpdateWithoutProductsDataInput;
}

export interface OrderUpdateManyWithWhereNestedInput {
  where: OrderScalarWhereInput;
  data: OrderUpdateManyDataInput;
}

export interface ProductUpsertWithoutProductOrdersInput {
  update: ProductUpdateWithoutProductOrdersDataInput;
  create: ProductCreateWithoutProductOrdersInput;
}

export interface OrderScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  OR?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  NOT?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
}

export type OrderWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface OrderCreateInput {
  id?: Maybe<ID_Input>;
  status: String;
  products?: Maybe<ProductOrderCreateManyWithoutOrdersInput>;
  user: UserCreateOneInput;
}

export interface ProductOrderWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  product?: Maybe<ProductWhereInput>;
  orders_every?: Maybe<OrderWhereInput>;
  orders_some?: Maybe<OrderWhereInput>;
  orders_none?: Maybe<OrderWhereInput>;
  qty?: Maybe<Int>;
  qty_not?: Maybe<Int>;
  qty_in?: Maybe<Int[] | Int>;
  qty_not_in?: Maybe<Int[] | Int>;
  qty_lt?: Maybe<Int>;
  qty_lte?: Maybe<Int>;
  qty_gt?: Maybe<Int>;
  qty_gte?: Maybe<Int>;
  AND?: Maybe<ProductOrderWhereInput[] | ProductOrderWhereInput>;
  OR?: Maybe<ProductOrderWhereInput[] | ProductOrderWhereInput>;
  NOT?: Maybe<ProductOrderWhereInput[] | ProductOrderWhereInput>;
}

export interface ProductOrderCreateManyWithoutOrdersInput {
  create?: Maybe<
    | ProductOrderCreateWithoutOrdersInput[]
    | ProductOrderCreateWithoutOrdersInput
  >;
  connect?: Maybe<
    ProductOrderWhereUniqueInput[] | ProductOrderWhereUniqueInput
  >;
}

export interface ProductTypeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  imageLink?: Maybe<String>;
  imageLink_not?: Maybe<String>;
  imageLink_in?: Maybe<String[] | String>;
  imageLink_not_in?: Maybe<String[] | String>;
  imageLink_lt?: Maybe<String>;
  imageLink_lte?: Maybe<String>;
  imageLink_gt?: Maybe<String>;
  imageLink_gte?: Maybe<String>;
  imageLink_contains?: Maybe<String>;
  imageLink_not_contains?: Maybe<String>;
  imageLink_starts_with?: Maybe<String>;
  imageLink_not_starts_with?: Maybe<String>;
  imageLink_ends_with?: Maybe<String>;
  imageLink_not_ends_with?: Maybe<String>;
  products_every?: Maybe<ProductWhereInput>;
  products_some?: Maybe<ProductWhereInput>;
  products_none?: Maybe<ProductWhereInput>;
  AND?: Maybe<ProductTypeWhereInput[] | ProductTypeWhereInput>;
  OR?: Maybe<ProductTypeWhereInput[] | ProductTypeWhereInput>;
  NOT?: Maybe<ProductTypeWhereInput[] | ProductTypeWhereInput>;
}

export interface ProductOrderCreateWithoutOrdersInput {
  id?: Maybe<ID_Input>;
  name: String;
  product: ProductCreateOneWithoutProductOrdersInput;
  qty: Int;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ProductCreateOneWithoutProductOrdersInput {
  create?: Maybe<ProductCreateWithoutProductOrdersInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductWhereInput>;
  AND?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  OR?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  NOT?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
}

export interface ProductCreateWithoutProductOrdersInput {
  id?: Maybe<ID_Input>;
  name: String;
  size: String;
  type: ProductTypeCreateOneWithoutProductsInput;
  fileName: String;
}

export interface NewsSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NewsWhereInput>;
  AND?: Maybe<NewsSubscriptionWhereInput[] | NewsSubscriptionWhereInput>;
  OR?: Maybe<NewsSubscriptionWhereInput[] | NewsSubscriptionWhereInput>;
  NOT?: Maybe<NewsSubscriptionWhereInput[] | NewsSubscriptionWhereInput>;
}

export interface ProductTypeCreateOneWithoutProductsInput {
  create?: Maybe<ProductTypeCreateWithoutProductsInput>;
  connect?: Maybe<ProductTypeWhereUniqueInput>;
}

export interface UserUpdateInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  password?: Maybe<String>;
}

export interface ProductTypeCreateWithoutProductsInput {
  id?: Maybe<ID_Input>;
  name: String;
  imageLink?: Maybe<String>;
}

export interface ProductUpdateManyDataInput {
  name?: Maybe<String>;
  size?: Maybe<String>;
  fileName?: Maybe<String>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ProductScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  size?: Maybe<String>;
  size_not?: Maybe<String>;
  size_in?: Maybe<String[] | String>;
  size_not_in?: Maybe<String[] | String>;
  size_lt?: Maybe<String>;
  size_lte?: Maybe<String>;
  size_gt?: Maybe<String>;
  size_gte?: Maybe<String>;
  size_contains?: Maybe<String>;
  size_not_contains?: Maybe<String>;
  size_starts_with?: Maybe<String>;
  size_not_starts_with?: Maybe<String>;
  size_ends_with?: Maybe<String>;
  size_not_ends_with?: Maybe<String>;
  fileName?: Maybe<String>;
  fileName_not?: Maybe<String>;
  fileName_in?: Maybe<String[] | String>;
  fileName_not_in?: Maybe<String[] | String>;
  fileName_lt?: Maybe<String>;
  fileName_lte?: Maybe<String>;
  fileName_gt?: Maybe<String>;
  fileName_gte?: Maybe<String>;
  fileName_contains?: Maybe<String>;
  fileName_not_contains?: Maybe<String>;
  fileName_starts_with?: Maybe<String>;
  fileName_not_starts_with?: Maybe<String>;
  fileName_ends_with?: Maybe<String>;
  fileName_not_ends_with?: Maybe<String>;
  AND?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  OR?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  NOT?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  username: String;
  email: String;
  phone: String;
  address: String;
  password: String;
}

export type ProductWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface OrderUpdateInput {
  status?: Maybe<String>;
  products?: Maybe<ProductOrderUpdateManyWithoutOrdersInput>;
  user?: Maybe<UserUpdateOneRequiredInput>;
}

export interface ProductUpdateWithWhereUniqueWithoutTypeInput {
  where: ProductWhereUniqueInput;
  data: ProductUpdateWithoutTypeDataInput;
}

export interface ProductOrderUpdateManyWithoutOrdersInput {
  create?: Maybe<
    | ProductOrderCreateWithoutOrdersInput[]
    | ProductOrderCreateWithoutOrdersInput
  >;
  delete?: Maybe<ProductOrderWhereUniqueInput[] | ProductOrderWhereUniqueInput>;
  connect?: Maybe<
    ProductOrderWhereUniqueInput[] | ProductOrderWhereUniqueInput
  >;
  set?: Maybe<ProductOrderWhereUniqueInput[] | ProductOrderWhereUniqueInput>;
  disconnect?: Maybe<
    ProductOrderWhereUniqueInput[] | ProductOrderWhereUniqueInput
  >;
  update?: Maybe<
    | ProductOrderUpdateWithWhereUniqueWithoutOrdersInput[]
    | ProductOrderUpdateWithWhereUniqueWithoutOrdersInput
  >;
  upsert?: Maybe<
    | ProductOrderUpsertWithWhereUniqueWithoutOrdersInput[]
    | ProductOrderUpsertWithWhereUniqueWithoutOrdersInput
  >;
  deleteMany?: Maybe<
    ProductOrderScalarWhereInput[] | ProductOrderScalarWhereInput
  >;
  updateMany?: Maybe<
    | ProductOrderUpdateManyWithWhereNestedInput[]
    | ProductOrderUpdateManyWithWhereNestedInput
  >;
}

export type ProductOrderWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProductOrderUpdateWithWhereUniqueWithoutOrdersInput {
  where: ProductOrderWhereUniqueInput;
  data: ProductOrderUpdateWithoutOrdersDataInput;
}

export interface ProductCreateWithoutTypeInput {
  id?: Maybe<ID_Input>;
  name: String;
  size: String;
  productOrders?: Maybe<ProductOrderCreateManyWithoutProductInput>;
  fileName: String;
}

export interface ProductOrderUpdateWithoutOrdersDataInput {
  name?: Maybe<String>;
  product?: Maybe<ProductUpdateOneRequiredWithoutProductOrdersInput>;
  qty?: Maybe<Int>;
}

export type ProductTypeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface OrderUpsertWithWhereUniqueWithoutProductsInput {
  where: OrderWhereUniqueInput;
  update: OrderUpdateWithoutProductsDataInput;
  create: OrderCreateWithoutProductsInput;
}

export interface ProductTypeCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  imageLink?: Maybe<String>;
  products?: Maybe<ProductCreateManyWithoutTypeInput>;
}

export interface ProductUpdateWithoutProductOrdersDataInput {
  name?: Maybe<String>;
  size?: Maybe<String>;
  type?: Maybe<ProductTypeUpdateOneRequiredWithoutProductsInput>;
  fileName?: Maybe<String>;
}

export interface ProductOrderUpdateInput {
  name?: Maybe<String>;
  product?: Maybe<ProductUpdateOneRequiredWithoutProductOrdersInput>;
  orders?: Maybe<OrderUpdateManyWithoutProductsInput>;
  qty?: Maybe<Int>;
}

export interface ProductTypeUpdateOneRequiredWithoutProductsInput {
  create?: Maybe<ProductTypeCreateWithoutProductsInput>;
  update?: Maybe<ProductTypeUpdateWithoutProductsDataInput>;
  upsert?: Maybe<ProductTypeUpsertWithoutProductsInput>;
  connect?: Maybe<ProductTypeWhereUniqueInput>;
}

export interface ProductOrderCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  product: ProductCreateOneWithoutProductOrdersInput;
  orders?: Maybe<OrderCreateManyWithoutProductsInput>;
  qty: Int;
}

export interface ProductTypeUpdateWithoutProductsDataInput {
  name?: Maybe<String>;
  imageLink?: Maybe<String>;
}

export interface ProductOrderUpsertWithWhereUniqueWithoutProductInput {
  where: ProductOrderWhereUniqueInput;
  update: ProductOrderUpdateWithoutProductDataInput;
  create: ProductOrderCreateWithoutProductInput;
}

export interface ProductTypeUpsertWithoutProductsInput {
  update: ProductTypeUpdateWithoutProductsDataInput;
  create: ProductTypeCreateWithoutProductsInput;
}

export interface NewsUpdateInput {
  title?: Maybe<String>;
  text?: Maybe<String>;
  image?: Maybe<String>;
}

export interface OrderUpdateWithoutProductsDataInput {
  status?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredInput>;
}

export interface ProductTypeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductTypeWhereInput>;
  AND?: Maybe<
    ProductTypeSubscriptionWhereInput[] | ProductTypeSubscriptionWhereInput
  >;
  OR?: Maybe<
    ProductTypeSubscriptionWhereInput[] | ProductTypeSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ProductTypeSubscriptionWhereInput[] | ProductTypeSubscriptionWhereInput
  >;
}

export interface ProductOrderUpsertWithWhereUniqueWithoutOrdersInput {
  where: ProductOrderWhereUniqueInput;
  update: ProductOrderUpdateWithoutOrdersDataInput;
  create: ProductOrderCreateWithoutOrdersInput;
}

export interface OrderWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  products_every?: Maybe<ProductOrderWhereInput>;
  products_some?: Maybe<ProductOrderWhereInput>;
  products_none?: Maybe<ProductOrderWhereInput>;
  user?: Maybe<UserWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<OrderWhereInput[] | OrderWhereInput>;
  OR?: Maybe<OrderWhereInput[] | OrderWhereInput>;
  NOT?: Maybe<OrderWhereInput[] | OrderWhereInput>;
}

export interface ProductOrderScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  qty?: Maybe<Int>;
  qty_not?: Maybe<Int>;
  qty_in?: Maybe<Int[] | Int>;
  qty_not_in?: Maybe<Int[] | Int>;
  qty_lt?: Maybe<Int>;
  qty_lte?: Maybe<Int>;
  qty_gt?: Maybe<Int>;
  qty_gte?: Maybe<Int>;
  AND?: Maybe<ProductOrderScalarWhereInput[] | ProductOrderScalarWhereInput>;
  OR?: Maybe<ProductOrderScalarWhereInput[] | ProductOrderScalarWhereInput>;
  NOT?: Maybe<ProductOrderScalarWhereInput[] | ProductOrderScalarWhereInput>;
}

export interface OrderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrderWhereInput>;
  AND?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
  OR?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
  NOT?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
}

export interface ProductOrderUpdateManyWithWhereNestedInput {
  where: ProductOrderScalarWhereInput;
  data: ProductOrderUpdateManyDataInput;
}

export interface ProductTypeUpdateManyMutationInput {
  name?: Maybe<String>;
  imageLink?: Maybe<String>;
}

export interface ProductOrderUpdateManyDataInput {
  name?: Maybe<String>;
  qty?: Maybe<Int>;
}

export interface ProductUpsertWithWhereUniqueWithoutTypeInput {
  where: ProductWhereUniqueInput;
  update: ProductUpdateWithoutTypeDataInput;
  create: ProductCreateWithoutTypeInput;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ProductUpdateManyWithoutTypeInput {
  create?: Maybe<
    ProductCreateWithoutTypeInput[] | ProductCreateWithoutTypeInput
  >;
  delete?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  set?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  disconnect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  update?: Maybe<
    | ProductUpdateWithWhereUniqueWithoutTypeInput[]
    | ProductUpdateWithWhereUniqueWithoutTypeInput
  >;
  upsert?: Maybe<
    | ProductUpsertWithWhereUniqueWithoutTypeInput[]
    | ProductUpsertWithWhereUniqueWithoutTypeInput
  >;
  deleteMany?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  updateMany?: Maybe<
    | ProductUpdateManyWithWhereNestedInput[]
    | ProductUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateDataInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  password?: Maybe<String>;
}

export interface ProductCreateManyWithoutTypeInput {
  create?: Maybe<
    ProductCreateWithoutTypeInput[] | ProductCreateWithoutTypeInput
  >;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface ProductOrderUpdateManyMutationInput {
  name?: Maybe<String>;
  qty?: Maybe<Int>;
}

export interface OrderUpdateManyMutationInput {
  status?: Maybe<String>;
}

export interface ProductUpdateManyMutationInput {
  name?: Maybe<String>;
  size?: Maybe<String>;
  fileName?: Maybe<String>;
}

export interface ProductCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  size: String;
  type: ProductTypeCreateOneWithoutProductsInput;
  productOrders?: Maybe<ProductOrderCreateManyWithoutProductInput>;
  fileName: String;
}

export interface NewsCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  text: String;
  image: String;
}

export interface ProductOrderCreateManyWithoutProductInput {
  create?: Maybe<
    | ProductOrderCreateWithoutProductInput[]
    | ProductOrderCreateWithoutProductInput
  >;
  connect?: Maybe<
    ProductOrderWhereUniqueInput[] | ProductOrderWhereUniqueInput
  >;
}

export interface ProductWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  size?: Maybe<String>;
  size_not?: Maybe<String>;
  size_in?: Maybe<String[] | String>;
  size_not_in?: Maybe<String[] | String>;
  size_lt?: Maybe<String>;
  size_lte?: Maybe<String>;
  size_gt?: Maybe<String>;
  size_gte?: Maybe<String>;
  size_contains?: Maybe<String>;
  size_not_contains?: Maybe<String>;
  size_starts_with?: Maybe<String>;
  size_not_starts_with?: Maybe<String>;
  size_ends_with?: Maybe<String>;
  size_not_ends_with?: Maybe<String>;
  type?: Maybe<ProductTypeWhereInput>;
  productOrders_every?: Maybe<ProductOrderWhereInput>;
  productOrders_some?: Maybe<ProductOrderWhereInput>;
  productOrders_none?: Maybe<ProductOrderWhereInput>;
  fileName?: Maybe<String>;
  fileName_not?: Maybe<String>;
  fileName_in?: Maybe<String[] | String>;
  fileName_not_in?: Maybe<String[] | String>;
  fileName_lt?: Maybe<String>;
  fileName_lte?: Maybe<String>;
  fileName_gt?: Maybe<String>;
  fileName_gte?: Maybe<String>;
  fileName_contains?: Maybe<String>;
  fileName_not_contains?: Maybe<String>;
  fileName_starts_with?: Maybe<String>;
  fileName_not_starts_with?: Maybe<String>;
  fileName_ends_with?: Maybe<String>;
  fileName_not_ends_with?: Maybe<String>;
  AND?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  OR?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  NOT?: Maybe<ProductWhereInput[] | ProductWhereInput>;
}

export interface ProductOrderCreateWithoutProductInput {
  id?: Maybe<ID_Input>;
  name: String;
  orders?: Maybe<OrderCreateManyWithoutProductsInput>;
  qty: Int;
}

export interface UserUpdateManyMutationInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  password?: Maybe<String>;
}

export interface OrderCreateManyWithoutProductsInput {
  create?: Maybe<
    OrderCreateWithoutProductsInput[] | OrderCreateWithoutProductsInput
  >;
  connect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
}

export interface ProductUpdateWithoutTypeDataInput {
  name?: Maybe<String>;
  size?: Maybe<String>;
  productOrders?: Maybe<ProductOrderUpdateManyWithoutProductInput>;
  fileName?: Maybe<String>;
}

export interface OrderCreateWithoutProductsInput {
  id?: Maybe<ID_Input>;
  status: String;
  user: UserCreateOneInput;
}

export interface NewsWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  AND?: Maybe<NewsWhereInput[] | NewsWhereInput>;
  OR?: Maybe<NewsWhereInput[] | NewsWhereInput>;
  NOT?: Maybe<NewsWhereInput[] | NewsWhereInput>;
}

export interface ProductUpdateInput {
  name?: Maybe<String>;
  size?: Maybe<String>;
  type?: Maybe<ProductTypeUpdateOneRequiredWithoutProductsInput>;
  productOrders?: Maybe<ProductOrderUpdateManyWithoutProductInput>;
  fileName?: Maybe<String>;
}

export interface OrderUpdateManyDataInput {
  status?: Maybe<String>;
}

export interface OrderUpdateManyWithoutProductsInput {
  create?: Maybe<
    OrderCreateWithoutProductsInput[] | OrderCreateWithoutProductsInput
  >;
  delete?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  connect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  set?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  disconnect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  update?: Maybe<
    | OrderUpdateWithWhereUniqueWithoutProductsInput[]
    | OrderUpdateWithWhereUniqueWithoutProductsInput
  >;
  upsert?: Maybe<
    | OrderUpsertWithWhereUniqueWithoutProductsInput[]
    | OrderUpsertWithWhereUniqueWithoutProductsInput
  >;
  deleteMany?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  updateMany?: Maybe<
    OrderUpdateManyWithWhereNestedInput[] | OrderUpdateManyWithWhereNestedInput
  >;
}

export interface ProductOrderUpdateWithoutProductDataInput {
  name?: Maybe<String>;
  orders?: Maybe<OrderUpdateManyWithoutProductsInput>;
  qty?: Maybe<Int>;
}

export interface ProductOrderUpdateWithWhereUniqueWithoutProductInput {
  where: ProductOrderWhereUniqueInput;
  data: ProductOrderUpdateWithoutProductDataInput;
}

export interface ProductOrderUpdateManyWithoutProductInput {
  create?: Maybe<
    | ProductOrderCreateWithoutProductInput[]
    | ProductOrderCreateWithoutProductInput
  >;
  delete?: Maybe<ProductOrderWhereUniqueInput[] | ProductOrderWhereUniqueInput>;
  connect?: Maybe<
    ProductOrderWhereUniqueInput[] | ProductOrderWhereUniqueInput
  >;
  set?: Maybe<ProductOrderWhereUniqueInput[] | ProductOrderWhereUniqueInput>;
  disconnect?: Maybe<
    ProductOrderWhereUniqueInput[] | ProductOrderWhereUniqueInput
  >;
  update?: Maybe<
    | ProductOrderUpdateWithWhereUniqueWithoutProductInput[]
    | ProductOrderUpdateWithWhereUniqueWithoutProductInput
  >;
  upsert?: Maybe<
    | ProductOrderUpsertWithWhereUniqueWithoutProductInput[]
    | ProductOrderUpsertWithWhereUniqueWithoutProductInput
  >;
  deleteMany?: Maybe<
    ProductOrderScalarWhereInput[] | ProductOrderScalarWhereInput
  >;
  updateMany?: Maybe<
    | ProductOrderUpdateManyWithWhereNestedInput[]
    | ProductOrderUpdateManyWithWhereNestedInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProductTypeUpdateInput {
  name?: Maybe<String>;
  imageLink?: Maybe<String>;
  products?: Maybe<ProductUpdateManyWithoutTypeInput>;
}

export interface ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput;
  data: ProductUpdateManyDataInput;
}

export interface ProductOrderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductOrderWhereInput>;
  AND?: Maybe<
    ProductOrderSubscriptionWhereInput[] | ProductOrderSubscriptionWhereInput
  >;
  OR?: Maybe<
    ProductOrderSubscriptionWhereInput[] | ProductOrderSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ProductOrderSubscriptionWhereInput[] | ProductOrderSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  email: String;
  phone: String;
  address: String;
  password: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  address: () => Promise<String>;
  password: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrderConnection {
  pageInfo: PageInfo;
  edges: OrderEdge[];
}

export interface OrderConnectionPromise
  extends Promise<OrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderEdge>>() => T;
  aggregate: <T = AggregateOrderPromise>() => T;
}

export interface OrderConnectionSubscription
  extends Promise<AsyncIterator<OrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderSubscription>() => T;
}

export interface Order {
  id: ID_Output;
  status: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface OrderPromise extends Promise<Order>, Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<String>;
  products: <T = FragmentableArray<ProductOrder>>(args?: {
    where?: ProductOrderWhereInput;
    orderBy?: ProductOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface OrderSubscription
  extends Promise<AsyncIterator<Order>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  status: () => Promise<AsyncIterator<String>>;
  products: <T = Promise<AsyncIterator<ProductOrderSubscription>>>(args?: {
    where?: ProductOrderWhereInput;
    orderBy?: ProductOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserSubscription>() => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrderNullablePromise
  extends Promise<Order | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<String>;
  products: <T = FragmentableArray<ProductOrder>>(args?: {
    where?: ProductOrderWhereInput;
    orderBy?: ProductOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  username: String;
  email: String;
  phone: String;
  address: String;
  password: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  address: () => Promise<String>;
  password: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  address: () => Promise<String>;
  password: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface NewsEdge {
  node: News;
  cursor: String;
}

export interface NewsEdgePromise extends Promise<NewsEdge>, Fragmentable {
  node: <T = NewsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NewsEdgeSubscription
  extends Promise<AsyncIterator<NewsEdge>>,
    Fragmentable {
  node: <T = NewsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductTypePreviousValues {
  id: ID_Output;
  name: String;
  imageLink?: String;
}

export interface ProductTypePreviousValuesPromise
  extends Promise<ProductTypePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  imageLink: () => Promise<String>;
}

export interface ProductTypePreviousValuesSubscription
  extends Promise<AsyncIterator<ProductTypePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  imageLink: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface NewsConnection {
  pageInfo: PageInfo;
  edges: NewsEdge[];
}

export interface NewsConnectionPromise
  extends Promise<NewsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NewsEdge>>() => T;
  aggregate: <T = AggregateNewsPromise>() => T;
}

export interface NewsConnectionSubscription
  extends Promise<AsyncIterator<NewsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NewsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNewsSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductType {
  id: ID_Output;
  name: String;
  imageLink?: String;
}

export interface ProductTypePromise extends Promise<ProductType>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  imageLink: () => Promise<String>;
  products: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProductTypeSubscription
  extends Promise<AsyncIterator<ProductType>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  imageLink: () => Promise<AsyncIterator<String>>;
  products: <T = Promise<AsyncIterator<ProductSubscription>>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProductTypeNullablePromise
  extends Promise<ProductType | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  imageLink: () => Promise<String>;
  products: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateNews {
  count: Int;
}

export interface AggregateNewsPromise
  extends Promise<AggregateNews>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNewsSubscription
  extends Promise<AsyncIterator<AggregateNews>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Product {
  id: ID_Output;
  name: String;
  size: String;
  fileName: String;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  size: () => Promise<String>;
  type: <T = ProductTypePromise>() => T;
  productOrders: <T = FragmentableArray<ProductOrder>>(args?: {
    where?: ProductOrderWhereInput;
    orderBy?: ProductOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  fileName: () => Promise<String>;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  size: () => Promise<AsyncIterator<String>>;
  type: <T = ProductTypeSubscription>() => T;
  productOrders: <T = Promise<AsyncIterator<ProductOrderSubscription>>>(args?: {
    where?: ProductOrderWhereInput;
    orderBy?: ProductOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  fileName: () => Promise<AsyncIterator<String>>;
}

export interface ProductNullablePromise
  extends Promise<Product | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  size: () => Promise<String>;
  type: <T = ProductTypePromise>() => T;
  productOrders: <T = FragmentableArray<ProductOrder>>(args?: {
    where?: ProductOrderWhereInput;
    orderBy?: ProductOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  fileName: () => Promise<String>;
}

export interface ProductTypeEdge {
  node: ProductType;
  cursor: String;
}

export interface ProductTypeEdgePromise
  extends Promise<ProductTypeEdge>,
    Fragmentable {
  node: <T = ProductTypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductTypeEdgeSubscription
  extends Promise<AsyncIterator<ProductTypeEdge>>,
    Fragmentable {
  node: <T = ProductTypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface News {
  id: ID_Output;
  title: String;
  text: String;
  image: String;
}

export interface NewsPromise extends Promise<News>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  text: () => Promise<String>;
  image: () => Promise<String>;
}

export interface NewsSubscription
  extends Promise<AsyncIterator<News>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  text: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
}

export interface NewsNullablePromise
  extends Promise<News | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  text: () => Promise<String>;
  image: () => Promise<String>;
}

export interface AggregateProductOrder {
  count: Int;
}

export interface AggregateProductOrderPromise
  extends Promise<AggregateProductOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductOrderSubscription
  extends Promise<AsyncIterator<AggregateProductOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NewsSubscriptionPayload {
  mutation: MutationType;
  node: News;
  updatedFields: String[];
  previousValues: NewsPreviousValues;
}

export interface NewsSubscriptionPayloadPromise
  extends Promise<NewsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NewsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NewsPreviousValuesPromise>() => T;
}

export interface NewsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NewsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NewsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NewsPreviousValuesSubscription>() => T;
}

export interface ProductOrderConnection {
  pageInfo: PageInfo;
  edges: ProductOrderEdge[];
}

export interface ProductOrderConnectionPromise
  extends Promise<ProductOrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductOrderEdge>>() => T;
  aggregate: <T = AggregateProductOrderPromise>() => T;
}

export interface ProductOrderConnectionSubscription
  extends Promise<AsyncIterator<ProductOrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductOrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductOrderSubscription>() => T;
}

export interface NewsPreviousValues {
  id: ID_Output;
  title: String;
  text: String;
  image: String;
}

export interface NewsPreviousValuesPromise
  extends Promise<NewsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  text: () => Promise<String>;
  image: () => Promise<String>;
}

export interface NewsPreviousValuesSubscription
  extends Promise<AsyncIterator<NewsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  text: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductOrder {
  id: ID_Output;
  name: String;
  qty: Int;
}

export interface ProductOrderPromise
  extends Promise<ProductOrder>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  product: <T = ProductPromise>() => T;
  orders: <T = FragmentableArray<Order>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  qty: () => Promise<Int>;
}

export interface ProductOrderSubscription
  extends Promise<AsyncIterator<ProductOrder>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  product: <T = ProductSubscription>() => T;
  orders: <T = Promise<AsyncIterator<OrderSubscription>>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  qty: () => Promise<AsyncIterator<Int>>;
}

export interface ProductOrderNullablePromise
  extends Promise<ProductOrder | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  product: <T = ProductPromise>() => T;
  orders: <T = FragmentableArray<Order>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  qty: () => Promise<Int>;
}

export interface AggregateOrder {
  count: Int;
}

export interface AggregateOrderPromise
  extends Promise<AggregateOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderSubscription
  extends Promise<AsyncIterator<AggregateOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrderSubscriptionPayload {
  mutation: MutationType;
  node: Order;
  updatedFields: String[];
  previousValues: OrderPreviousValues;
}

export interface OrderSubscriptionPayloadPromise
  extends Promise<OrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderPreviousValuesPromise>() => T;
}

export interface OrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface OrderPreviousValues {
  id: ID_Output;
  status: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface OrderPreviousValuesPromise
  extends Promise<OrderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface OrderPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  status: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductTypeConnection {
  pageInfo: PageInfo;
  edges: ProductTypeEdge[];
}

export interface ProductTypeConnectionPromise
  extends Promise<ProductTypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductTypeEdge>>() => T;
  aggregate: <T = AggregateProductTypePromise>() => T;
}

export interface ProductTypeConnectionSubscription
  extends Promise<AsyncIterator<ProductTypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductTypeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductTypeSubscription>() => T;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrderEdge {
  node: Order;
  cursor: String;
}

export interface OrderEdgePromise extends Promise<OrderEdge>, Fragmentable {
  node: <T = OrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderEdgeSubscription
  extends Promise<AsyncIterator<OrderEdge>>,
    Fragmentable {
  node: <T = OrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductOrderPreviousValues {
  id: ID_Output;
  name: String;
  qty: Int;
}

export interface ProductOrderPreviousValuesPromise
  extends Promise<ProductOrderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  qty: () => Promise<Int>;
}

export interface ProductOrderPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductOrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  qty: () => Promise<AsyncIterator<Int>>;
}

export interface ProductOrderSubscriptionPayload {
  mutation: MutationType;
  node: ProductOrder;
  updatedFields: String[];
  previousValues: ProductOrderPreviousValues;
}

export interface ProductOrderSubscriptionPayloadPromise
  extends Promise<ProductOrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductOrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductOrderPreviousValuesPromise>() => T;
}

export interface ProductOrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductOrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductOrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductOrderPreviousValuesSubscription>() => T;
}

export interface ProductTypeSubscriptionPayload {
  mutation: MutationType;
  node: ProductType;
  updatedFields: String[];
  previousValues: ProductTypePreviousValues;
}

export interface ProductTypeSubscriptionPayloadPromise
  extends Promise<ProductTypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductTypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductTypePreviousValuesPromise>() => T;
}

export interface ProductTypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductTypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductTypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductTypePreviousValuesSubscription>() => T;
}

export interface ProductPreviousValues {
  id: ID_Output;
  name: String;
  size: String;
  fileName: String;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  size: () => Promise<String>;
  fileName: () => Promise<String>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  size: () => Promise<AsyncIterator<String>>;
  fileName: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface ProductOrderEdge {
  node: ProductOrder;
  cursor: String;
}

export interface ProductOrderEdgePromise
  extends Promise<ProductOrderEdge>,
    Fragmentable {
  node: <T = ProductOrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductOrderEdgeSubscription
  extends Promise<AsyncIterator<ProductOrderEdge>>,
    Fragmentable {
  node: <T = ProductOrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProductType {
  count: Int;
}

export interface AggregateProductTypePromise
  extends Promise<AggregateProductType>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductTypeSubscription
  extends Promise<AsyncIterator<AggregateProductType>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  },
  {
    name: "ProductType",
    embedded: false
  },
  {
    name: "News",
    embedded: false
  },
  {
    name: "ProductOrder",
    embedded: false
  },
  {
    name: "Order",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
