type Query {
  getUser(id: ID!): User
  login(email: String!, password: String!): Token!
  currentUser(token: String): User
  getForumList(text: String): [Forum!]!
  getForum(id: ID!): Forum!
  getCognitiveTest(id: ID!, type: String!, len: Int!): CognitiveTest!
  getQuestions: [CognitiveTestQuestion!]!
  getTestByUser(User: ID!): Int!
  checkTestCompletion(User: ID!, CognitiveTest: ID!, len: Int!): Boolean!
  getMusicVideo: String!
  getNews: News!
  getOptimismResults(User: ID!): [Result!]!
  getSelfEsteemResults(User: ID!): [Result!]!
  getCognitiveResults(User: ID!): [Result!]!
  generateDataResultsByUser(User: ID!): String!
  getOptResults(User: ID!): Float!
  getSEResults(User: ID!): Float!
  getCgResults(User: ID!): Float!
  getAllTests(User: ID!): Float!
  trainFirstData: Boolean!
  generateDataByResults(User: ID!, cognitiveResult: Float!, selfEsteemResult: Float!, optimismResult: Float!): String!
}

type Mutation {
  signup(username: String!, email: String!, password: String!, aidName: String!, phone: String!, address: String!, birthDate: String!): Token!
  addForum(text: String!, title: String!, user: ID!): Forum!
  addComment(text: String!, forum: ID!, user: ID!): Comment!
  addVideo(url: String!): VideoMusic!
  addResponse(text: String!, correct: Boolean!, question: ID!): Response!
  addUserResponse(question: ID!, response: ID!, User: ID!, CognitiveTest: ID!): UserResponse!
  removeUserResponse(question: ID!, User: ID!, CognitiveTest: ID!): BatchPayload!
}

type Token {
  authorization: String!
  user: User!
}

type Result {
  sum: Float!
  createdAt: String!
}

input UserInput {
  username: String!
  email: String!
  aidName: String!
  phone: String!
  address: String!
  birthDate: String!
  password: String!
}

type User {
  id: ID!
  username: String!
  email: String!
  aidName: String!
  phone: String!
  address: String!
  birthDate: String!
  password: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type Forum {
  id: ID!
  text: String
  title: String
  user: User!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

type CognitiveTest {
  id: ID!
  questions(where: CognitiveTestQuestionWhereInput, orderBy: CognitiveTestQuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CognitiveTestQuestion!]
  responses(where: UserResponseWhereInput, orderBy: UserResponseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserResponse!]
  User: User!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type CognitiveTestQuestion {
  id: ID!
  question: String!
  active: Boolean!
  type: QuestionType
  responses(where: ResponseWhereInput, orderBy: ResponseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Response!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

type News {
  id: ID!
  title: String!
  text: String!
  image: String!
}

type Comment {
  id: ID!
  text: String
  forum: Forum!
  user: User!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type VideoMusic {
  id: ID!
  url: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type Response {
  id: ID!
  question: CognitiveTestQuestion!
  correct: Boolean!
  text: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserResponse {
  id: ID!
  question: CognitiveTestQuestion!
  response: Response!
  User: User!
  CognitiveTest: CognitiveTest!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  forum: ForumWhereInput
  user: UserWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

input CognitiveTestQuestionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  question: String
  question_not: String
  question_in: [String!]
  question_not_in: [String!]
  question_lt: String
  question_lte: String
  question_gt: String
  question_gte: String
  question_contains: String
  question_not_contains: String
  question_starts_with: String
  question_not_starts_with: String
  question_ends_with: String
  question_not_ends_with: String
  active: Boolean
  active_not: Boolean
  type: QuestionTypeWhereInput
  responses_every: ResponseWhereInput
  responses_some: ResponseWhereInput
  responses_none: ResponseWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [CognitiveTestQuestionWhereInput!]
  OR: [CognitiveTestQuestionWhereInput!]
  NOT: [CognitiveTestQuestionWhereInput!]
}

enum CognitiveTestQuestionOrderByInput {
  id_ASC
  id_DESC
  question_ASC
  question_DESC
  active_ASC
  active_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

input UserResponseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  question: CognitiveTestQuestionWhereInput
  response: ResponseWhereInput
  User: UserWhereInput
  CognitiveTest: CognitiveTestWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UserResponseWhereInput!]
  OR: [UserResponseWhereInput!]
  NOT: [UserResponseWhereInput!]
}

enum UserResponseOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type QuestionType {
  id: ID!
  type: String!
  questions(where: CognitiveTestQuestionWhereInput, orderBy: CognitiveTestQuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CognitiveTestQuestion!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

input ResponseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  question: CognitiveTestQuestionWhereInput
  correct: Boolean
  correct_not: Boolean
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ResponseWhereInput!]
  OR: [ResponseWhereInput!]
  NOT: [ResponseWhereInput!]
}

enum ResponseOrderByInput {
  id_ASC
  id_DESC
  correct_ASC
  correct_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

scalar Long

input ForumWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  user: UserWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ForumWhereInput!]
  OR: [ForumWhereInput!]
  NOT: [ForumWhereInput!]
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  aidName: String
  aidName_not: String
  aidName_in: [String!]
  aidName_not_in: [String!]
  aidName_lt: String
  aidName_lte: String
  aidName_gt: String
  aidName_gte: String
  aidName_contains: String
  aidName_not_contains: String
  aidName_starts_with: String
  aidName_not_starts_with: String
  aidName_ends_with: String
  aidName_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  birthDate: String
  birthDate_not: String
  birthDate_in: [String!]
  birthDate_not_in: [String!]
  birthDate_lt: String
  birthDate_lte: String
  birthDate_gt: String
  birthDate_gte: String
  birthDate_contains: String
  birthDate_not_contains: String
  birthDate_starts_with: String
  birthDate_not_starts_with: String
  birthDate_ends_with: String
  birthDate_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input QuestionTypeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  questions_every: CognitiveTestQuestionWhereInput
  questions_some: CognitiveTestQuestionWhereInput
  questions_none: CognitiveTestQuestionWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [QuestionTypeWhereInput!]
  OR: [QuestionTypeWhereInput!]
  NOT: [QuestionTypeWhereInput!]
}

input CognitiveTestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  questions_every: CognitiveTestQuestionWhereInput
  questions_some: CognitiveTestQuestionWhereInput
  questions_none: CognitiveTestQuestionWhereInput
  responses_every: UserResponseWhereInput
  responses_some: UserResponseWhereInput
  responses_none: UserResponseWhereInput
  User: UserWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [CognitiveTestWhereInput!]
  OR: [CognitiveTestWhereInput!]
  NOT: [CognitiveTestWhereInput!]
}
