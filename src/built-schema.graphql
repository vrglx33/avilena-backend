type Query {
  getUser(id: ID!): User
  login(email: String!, password: String!): Token!
  currentUser(token: String): User
  getNews: News!
}

type Mutation {
  signup(username: String!, email: String!, phone: String!, address: String!): Token!
}

type Token {
  authorization: String!
  user: User!
}

type Result {
  sum: Float!
  createdAt: String!
}

input UserInput {
  username: String!
  email: String!
  phone: String!
  address: String!
  birthDate: String!
  password: String!
}

type User {
  id: ID!
  username: String!
  email: String!
  phone: String!
  address: String!
  password: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type News {
  id: ID!
  title: String!
  text: String!
  image: String!
}

scalar DateTime
